   
   
       project notes

    when developing on windows and mac, the file systems 
    In Unix systems the end of a line is represented with a line feed (LF). 
    In windows a line is represented with a carriage return (CR) and a line feed (LF) thus (CRLF). 
    when you get code from git that was uploaded from a unix system they will only have an LF.

    the .gitignore helps tremendously with getting the project to run on both OS
   



    
    ***Snake Game 
    player story
    1 -> starts with GUI

    2 -> choose game settings
        -choose number of players
        -choose what players are human vs CPU
        -choose player's colours
        -choose game mode (regular - single food, hungry - multiple foods)
        -choose settings (do snakes turn into food when they die, do snakes respawn, grow amount, staring size, etc)
        -choose stage (original, preset map, or random obstacles)

    3 -> click start 

    4 -> GUI leaves and snake game is displayed

    5 -> player presses any key and game starts then continues indefinitely





       TODO
        -make a target score win the game
        +win screen

        -make when they run into each other, its not the first one that trumps the other

        -death penalty timer
        
        -pause button+function

        -make snake colours from a dictionary, not an int index and a colour array

    ideas
        make number of lives
        make random obstacle maker, and preset stages to choose from.
        make high score file to keep reading from.

        add powerups (speed, grow a lot, untargettable)
        make options for food (multiple random spawning, single one that grows you then moves, toggle for dead snakes becoming food )
        golden food that moves/bounces around
   
   
   
   







































OLD HANDLER SCRIPT
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GameHandler_Script : MonoBehaviour
{
    /* 

    ***Game Handler Script 
    controls the ability to set game settings

    script sets up the game, and acts as the access point for the snakes to interact with

    -initializing the snakes, walls, and food
    ->then setting all the values for the snakes (controls, colours, prefabs, etc.)

    ***Access points
    public string CheckPos()
        -called by snakes to determine what is in x location

    public SpawnFood()
        -called by self and snakes when spawning any kind of food



    Handler script story
    1 -> game starts/loads

    2 -> grabs values from user-set settings in out-of-game settings (MENU SCRIPT)

    3 -> grabs prefabs and converts variables into "usable data"

    4 -> spawns snakes and begins the game

    5 -> game starts and handler moves snakes and is accesible for snake scripts when required
        - when snakes need to check what is occupying a position on the map
            -> call this script requesting it, then recieve what is in that position
        -if the snake is trying to move to a food block
            -> destroy the food block - if appropriate, generate a new food block

    */


        //all these vars are set by menu script
        private char gameMode{set;} // e - endless, f - first to
        private int goalPoints{set;}
        private int num_Players{set;}
        private int num_Human_Players{set;}
        //- advanced options screen menu vars
        // when loaded initially, they are set to the first preset gamemode values
        private int player1_Colour {set;}
        private int player2_Colour {set;}
        private int player3_Colour {set;}
        private int player4_Colour {set;}
        private int startingSize {set;}
        private int normalFood_GrowthAmount {set;}
        private int deadSnakeFood_GrowthAmount {set;}
        private int goldFood_GrowthAmount{set;}
        private float snakeSpeed{set;}
        private float ghostMode_Duration{set;}
        private float deathPenalty_Duration{set;}
        private float goldFood_SpawnChance{set;}
        private bool doSnakesTurnToFood{set;}

    private Color[] snakeColours = new Color[] {
       Color.green, Color.red, Color.blue, Color.gray, Color.yellow + Color.blue, Color.magenta, Color.yellow + Color.red  
    };

    private Vector3[] starting_Positions = new Vector3[4];
    private Color[] player_Colours;

    private KeyCode[,] playerInputs = new KeyCode[,] {
        {KeyCode.UpArrow, KeyCode.DownArrow, KeyCode.LeftArrow, KeyCode.RightArrow},
        {KeyCode.W, KeyCode.S, KeyCode.A, KeyCode.D},
        {KeyCode.T, KeyCode.G, KeyCode.F, KeyCode.H},
        {KeyCode.I, KeyCode.K, KeyCode.J, KeyCode.L}
    };

    //array keeps track of all the wall blocks in the game
    private GameObject[] wallArr;

    //list keeps track of all the food in the game
    private List<GameObject> foodList = new List<GameObject>();

    //list keeps track of all the snakes in the game
    private List<Snake_Script> snakeScripts = new List<Snake_Script>();

    //Array keeps track of all 4 score displays
    private GameObject[] playerDisplays;
    private PlayerDisplay_Script[] playerDisplayScripts;

    private GameObject snakePrefab;
    private GameObject snakeSegmentPrefab;
    private GameObject foodPrefab;


    void DebugAllVars(){
        
        Debug.Log("gameMode: " + gameMode);
        Debug.Log("goalPoints: " + goalPoints);
        Debug.Log("num_Players: " + num_Players);
        Debug.Log("num_Human_Players: " + num_Human_Players);
        Debug.Log("player1_Colour: " + player1_Colour);
        Debug.Log("player2_Colour: " + player2_Colour);
        Debug.Log("player3_Colour: " + player3_Colour);
        Debug.Log("player4_Colour: " + player4_Colour);
        Debug.Log("startingSize: " + startingSize);
        Debug.Log("normalFood_GrowthAmount: " + normalFood_GrowthAmount);
        Debug.Log("deadSnakeFood_GrowthAmount: " + deadSnakeFood_GrowthAmount);
        Debug.Log("goldFood_GrowthAmount: " + goldFood_GrowthAmount);
        Debug.Log("snakeSpeed: " + snakeSpeed);
        Debug.Log("ghostMode_Duration: " + ghostMode_Duration);
        Debug.Log("deathPenalty_Duration: " + deathPenalty_Duration);
        Debug.Log("goldFood_SpawnChance: " + goldFood_SpawnChance);
        Debug.Log("doSnakesTurnToFood: " + doSnakesTurnToFood);

    }
    // Start is called before the first frame update
    void Start(){
        // grab all resources
        snakePrefab = Resources.Load("Snake") as GameObject;
        snakeSegmentPrefab = Resources.Load("SnakeSegment") as GameObject;
        foodPrefab = Resources.Load("Food") as GameObject;
        
        // grab all existing walls
        wallArr = GameObject.FindGameObjectsWithTag("wall");

    }
    public void LoadGame(){//called by the menu script

        // organize vars into more easily usable formats
        player_Colours = new Color[] {snakeColours[player1_Colour], snakeColours[player2_Colour], snakeColours[player3_Colour], snakeColours[player4_Colour]};

        //grab player displays and set vars
        playerDisplays = new GameObject[4];
        playerDisplayScripts = new PlayerDisplay_Script[4];
        for (int i = 0; i < playerDisplays.Length; i++)
        {
            playerDisplays[i] = GameObject.Find("PlayerDisplays").transform.GetChild(i).gameObject;
            playerDisplays[i].SetActive(false);
            playerDisplayScripts[i] = playerDisplays[i].GetComponent<PlayerDisplay_Script>();
            playerDisplayScripts[i].SetValues(i);
            playerDisplayScripts[i].SetOutlineColour(player_Colours[i]);
        }

        for (int i = 0; i < num_Players; i++)
        {
            //calculate spawn position (calculates equal horizontal positions for each snake with space on each side)
            int spawnPosX = 25/(num_Players + 1) * (i+1);

            if(num_Players == 4 && spawnPosX < 12){
                //manual adjustment to move the first two snakes' spawn positions to the left one space 
                //IF playing 4 player, since the spots are calulated by integers and theres 25 spots, it doesnt round down these two numbers properly
                spawnPosX -= 1;
            }
            starting_Positions[i] = new Vector3(spawnPosX,-1,0);

            //create the snake
            Snake_Script newSnake = Instantiate(snakePrefab, new Vector3(-10, -10 ,0), new Quaternion(0,0,0,0), this.transform.parent).GetComponent<Snake_Script>();
            
            // enable the snake's score display
            playerDisplays[i].SetActive(true);

            //set the snake's values and objects
            newSnake.SetObjects(//GameHandler_Script handlerScript,  GameObject head, GameObject seg
                this,
                newSnake.transform.GetChild(0).gameObject, 
                snakeSegmentPrefab
            );

            newSnake.SetValues(//int playernum, float snakeSpeed, int startingSize, Vector3 startingPos, int foodgrowRate, bool doesTurnIntoFood
                i,
                snakeSpeed,
                startingSize,
                starting_Positions[i],
                normalFood_GrowthAmount,
                deadSnakeFood_GrowthAmount,
                goldFood_GrowthAmount,
                doSnakesTurnToFood,
                ghostMode_Duration
            );

            newSnake.SetInputs(//KeyCode[] inputs
                new KeyCode[] {playerInputs[i,0], playerInputs[i,1], playerInputs[i,2], playerInputs[i,3]}
            );

            newSnake.SetPlayerDisplay(//GameObject scoreDisplay, GameObject highScoreDisplay
                playerDisplayScripts[i]
            );

            newSnake.SetColour(//Color col
                player_Colours[i]
            );

            //add the snake to the list
            snakeScripts.Add(newSnake);
            
        }

    }
    public void StartGame(){//called by the menu script when the game is loaded

        DebugAllVars();

        //spawn the first bit of food and start the game
        SpawnFood(-1, default(Vector3), "normalFood");

        //calls Movesnake every user-set time increment to move the snakes
        InvokeRepeating("MoveSnakes", 0, snakeSpeed);   

    }

    private void MoveSnakes(){
        foreach (Snake_Script snakeScript in snakeScripts)
        {
            snakeScript.TryMoveSnake();
        }
    }

    public void EndGame(){
        CancelInvoke();
    }






    public string CheckPos(int playerNum, Vector3 pos, bool DestroyFood){
        //used to check if there is food or danger in a grid position

        // playerNum is the snake sending the request,
        // pos is the location to check, 
        // DestroyFood is a bool to check if the food found should be eaten

        //empty, self, otherSnake, wall, normalFood, snakeFood, GoldFood

        //returns 'e' for empty, 's' for snake, 'f' for food, or 'w' for wall
        
        if(playerNum != -1)
        {
            //check if bumping into self
            if(snakeScripts[playerNum].CheckForSnakeAtPos(pos)){
                return "self";
            }

            //check if bumping into other snakes
            for (int i = 0; i < num_Players; i++)
            {   
                if (i != playerNum){
                    if(snakeScripts[i].CheckForSnakeAtPos(pos)){
                        return "snake";
                    }
                }
            }
        }
        else{
            foreach (Snake_Script snake in snakeScripts)
            {   //check if bumping into any snakes
                if(snake.CheckForSnakeAtPos(pos)){
                    return "snake";
                }
            }
        }

        foreach (GameObject wall in wallArr)
        {   //check if bumping into wall
            if (pos == wall.transform.position){
                return "wall";
            }
        }

        foreach (GameObject food in foodList)
        {   //check if bumping into food
            if (pos == food.transform.position){
                string type = food.tag;
                switch (type)
                {
                    case "normalFood":
                        if(DestroyFood){
                            SpawnFood(-1, default(Vector3), "normalFood");
                        }
                        break;

                    case "snakeFood":
                        break;

                    case "goldFood":
                        if(DestroyFood){
                            SpawnFood(-1, default(Vector3), "normalFood");
                        }
                        break;

                    default:
                    break;
                }
                if(DestroyFood){
                    foodList.Remove(food);
                    Destroy(food);
                }
                return type;
            }
        }

        //if theres nothing in the spot,
        return "empty";
    }

    public void SpawnFood(int playerNum, Vector3 pos, string foodType)
    {
        if (pos == default){
            //find a new position for the food
            pos = new Vector3(Random.Range(0,25), Random.Range(0,25), 0);

            while (CheckPos(-1, pos, false) != "empty"){
                pos = new Vector3(Random.Range(0,25), Random.Range(0,25), 0);
            }
        }
        else if (CheckPos(-1, pos, false) == "empty"){
            //Debug.Log("not empty");
            //if trying to spawn food on an existing food, dont
            return;
        }
        GameObject newFood = Instantiate(foodPrefab, pos, new Quaternion(0,0,0,0), this.transform);

        switch (foodType)
        {
            case "normalFood":
                //chance to turn into golden food
                if((int)Random.Range(1,goldFood_SpawnChance) == 1){
                    //Debug.Log("winner");
                    foodType = "goldFood";
                    goto case "goldFood";
                }
                break;
            case "snakeFood":
                //colour food
                newFood.GetComponent<SpriteRenderer>().color = new Color(0.7f, 0.5f, 0.23f);
                break;
            case "goldFood":
                //colour food
                newFood.GetComponent<SpriteRenderer>().color = Color.yellow;
                break;
            default:
            break;
        }
        newFood.tag = foodType;
        foodList.Add(newFood);
    }
    // Update is called once per frame
    void Update()
    {
        
    }
}
















































OLD MENU SCRIPT

using System.Collections;
using System.Collections.Generic;
using UnityEngine.UI;
using UnityEngine;


public class Menu_Script : MonoBehaviour
{
    //menu script

    ///////////// gamemode universal vars
    private char gameMode{set;} = 'e'; // e - endless, f - first to
    private int goalPoints{set;} = 100;
    private int num_Players{set;} = 1;
    private int num_Human_Players{set;} = 1;

    //- advanced options screen menu vars
    // when loaded initially, they are set to the first preset gamemode values
    private int player1_Colour{set;}
    private int player2_Colour{set;}
    private int player3_Colour{set;}
    private int player4_Colour{set;}
    private int startingSize{set;}
    private int normalFood_GrowthAmount{set;}
    private int deadSnakeFood_GrowthAmount{set;}
    private int goldFood_GrowthAmount{set;}
    private float snakeSpeed{set;}
    private float ghostMode_Duration{set;}
    private float deathPenalty_Duration{set;}
    private float goldFood_SpawnChance{set;}
    private bool doSnakesTurnToFood{set;}

    private string[] presetsNamesArr = new string[] {
        "Custom",
        "Classic",
        "Wild"
    };
    private float[,] presetsValuesArr = new float[,] {
        {//custom
            0, 1, 2, 3,     //snake colours
            0.1f, 3, 2, 3,  //speed/durations
            1, 10, 3, 1, 30 //food options
        },
        {//classic mode
           0, 1, 2, 3,     //snake colours
            0.1f, 3, 2, 3,  //speed/durations
            1, 10, 3, 1, 30 //food options
        },
        {//wild mode
           0, 1, 2, 3,     //snake colours
            0.1f, 3, 2, 3,  //speed/durations
            1, 10, 3, 1, 30 //food options
        }
    };


    private GameHandler_Script gameHandlerScript;
    private GameObject[] AllAdvancedOptionsArr;


    //menu screen vars
    private Text gameMode_Text;
    private Text target_Text;
    private GameObject firstToSelector;
    private GameObject[] snakeIndicatorArr; //indicators for snakes
    private GameObject[] cpuIndicatorSpriteArr; //part that colours the snake grey to indicate its a computer player

    //advanced options screen vars
    private GameObject advancedOptionsScreen;
    private int selectedPreset = 0; //starts at first selected preset


    // Start is called before the first frame update
    void Start()
    {
        //gathering gameobjects
        gameHandlerScript = GameObject.Find("GameHandler").GetComponent<GameHandler_Script>();

        gameMode_Text = GameObject.Find("GameModeText").transform.GetComponent<Text>();
        target_Text = GameObject.Find("PointsText").transform.GetComponent<Text>();
        firstToSelector = GameObject.Find("FirstToPoints");

        snakeIndicatorArr = new GameObject[4];
        cpuIndicatorSpriteArr = new GameObject[4];
        for (int i = 0; i < 4; i++)
        {
            snakeIndicatorArr[i] = GameObject.Find("SnakeIndicators").transform.GetChild(i).gameObject;
            cpuIndicatorSpriteArr[i] = snakeIndicatorArr[i].transform.GetChild(2).gameObject;
        }

        AllAdvancedOptionsArr = new GameObject[]{
            GameObject.Find("PresetsText"),

            GameObject.Find("P1ColourDropdown"),
            GameObject.Find("P2ColourDropdown"),
            GameObject.Find("P3ColourDropdown"),
            GameObject.Find("P4ColourDropdown"),

            GameObject.Find("InputField1"),
            GameObject.Find("InputField2"),
            GameObject.Find("InputField3"),
            GameObject.Find("InputField4"),

            GameObject.Find("Toggle"),
            GameObject.Find("InputField5"),
            GameObject.Find("InputField6"),
            GameObject.Find("InputField7"),
            GameObject.Find("InputField8"),
        };

        advancedOptionsScreen = GameObject.Find("AdvancedOptionsScreen");

        UpdateMenuScreen();
        UpdateAdvancedOptionsScreen(-1, 0);

        advancedOptionsScreen.SetActive(false);


    }

    void StartGame()
    {
        //when user clicks play, 

        int[] _iarr = {
            goalPoints,
            num_Players,
            num_Human_Players,
            player1_Colour,
            player2_Colour,
            player3_Colour,
            player4_Colour,
            startingSize,
            normalFood_GrowthAmount,
            deadSnakeFood_GrowthAmount,
            goldFood_GrowthAmount
        };

        float[] _farr = {
            snakeSpeed,
            ghostMode_Duration,
            deathPenalty_Duration,
            goldFood_SpawnChance
        };

        //send vars to game handler to use, 
        gameHandlerScript.SetAllVars(//char c, bool b, int[] iArr, float[] fArr
            gameMode,
            doSnakesTurnToFood,
            _iarr,
            _farr
        );

        //setup game
        gameHandlerScript.LoadGame();

        //start game
        gameHandlerScript.StartGame();

        //then close menu
        HideMenu();
    }

    void ShowMenu()
    {
        //not currently used
    }
    void HideMenu()
    {
        this.gameObject.SetActive(false);
        advancedOptionsScreen.SetActive(false);
        //called when game starts to hide menu
    }

    void UpdateMenuScreen()
    {
        //called when a button is pressed or value changes on the main menu screen to reflect changes

        //remove the target points selector if the gamemode is endless
        if (gameMode == 'e')
        {
            firstToSelector.SetActive(false);
        }
        else if (gameMode == 'f')
        {
            firstToSelector.SetActive(true);
        }

        //display the snake indicators correctly
        for (int i = 0; i < 4; i++)
        {
            if (i < num_Players)
            {
                snakeIndicatorArr[i].SetActive(true);
            }
            else
            {
                snakeIndicatorArr[i].SetActive(false);
            }
            if (i < (num_Human_Players))
            {
                cpuIndicatorSpriteArr[i].SetActive(false);
            }
            else
            {
                cpuIndicatorSpriteArr[i].SetActive(true);
            }
        }
    }

    void UpdateAdvancedOptionsScreen(int _optionIndex, float _value)
    {
        //called when a button is pressed or value changes on the advanced options screen to reflect changes
        //_optionIndex is the var to be changed _value is the new value to be used
        // if _optionIndex is 0 (using a preset), update all of them

        switch (_optionIndex)
        {
            case 0://update all using a preset
                AllAdvancedOptionsArr[0].GetComponent<Text>().text = presetsNamesArr[selectedPreset];
                goto case 1;

            case 1://p1 Colour
                player1_Colour = AllAdvancedOptionsArr[1].GetComponent<Dropdown>().value = ((int)presetsValuesArr[selectedPreset, 0]);
                if(_optionIndex != 0){break;}else {goto case 2;}
            case 2://p2 Colour
                player2_Colour = AllAdvancedOptionsArr[2].GetComponent<Dropdown>().value = ((int)presetsValuesArr[selectedPreset, 1]);
                if(_optionIndex != 0){break;}else {goto case 3;}
            case 3://p3 Colour
                player3_Colour = AllAdvancedOptionsArr[3].GetComponent<Dropdown>().value = ((int)presetsValuesArr[selectedPreset, 2]);
                if(_optionIndex != 0){break;}else {goto case 4;}
            case 4://p4 Colour
                player4_Colour = AllAdvancedOptionsArr[4].GetComponent<Dropdown>().value = ((int)presetsValuesArr[selectedPreset, 3]);
                if(_optionIndex != 0){break;}else {goto case 5;}

            case 5://snake speed
                snakeSpeed = presetsValuesArr[selectedPreset, 4];
                AllAdvancedOptionsArr[5].GetComponent<Text>().text = snakeSpeed.ToString();
                if(_optionIndex != 0){break;}else {goto case 6;}

            case 6://snake starting size
                startingSize = ((int)presetsValuesArr[selectedPreset, 5]);
                AllAdvancedOptionsArr[6].GetComponent<Text>().text = startingSize.ToString();
                if(_optionIndex != 0){break;}else {goto case 7;}

            case 7://ghosted duration
                ghostMode_Duration = presetsValuesArr[selectedPreset, 6];
                AllAdvancedOptionsArr[7].GetComponent<Text>().text = ghostMode_Duration.ToString();
                if(_optionIndex != 0){break;}else {goto case 8;}

            case 8://death penalty duration
                deathPenalty_Duration = presetsValuesArr[selectedPreset, 7];
                AllAdvancedOptionsArr[8].GetComponent<Text>().text = deathPenalty_Duration.ToString();
                if(_optionIndex != 0){break;}else {goto case 9;}

            case 9://do snakes turn to food
                doSnakesTurnToFood = AllAdvancedOptionsArr[9].GetComponent<Toggle>().isOn = (1 == presetsValuesArr[selectedPreset, 8]);
                if(_optionIndex != 0){break;}else {goto case 10;}

            case 10://gold food spawn chance
                goldFood_SpawnChance = presetsValuesArr[selectedPreset, 9];
                AllAdvancedOptionsArr[10].GetComponent<Text>().text = goldFood_SpawnChance.ToString();
                if(_optionIndex != 0){break;}else {goto case 11;}

            case 11://normal food growth
                normalFood_GrowthAmount = ((int)presetsValuesArr[selectedPreset, 10]);
                AllAdvancedOptionsArr[11].GetComponent<Text>().text = normalFood_GrowthAmount.ToString();
                if(_optionIndex != 0){break;}else {goto case 12;}

            case 12://dead snake food growth
                deadSnakeFood_GrowthAmount = ((int)presetsValuesArr[selectedPreset, 11]);
                AllAdvancedOptionsArr[12].GetComponent<Text>().text = deadSnakeFood_GrowthAmount.ToString();
                if(_optionIndex != 0){break;}else {goto case 13;}

            case 13://gold food growth
                goldFood_GrowthAmount = ((int)presetsValuesArr[selectedPreset, 12]);
                AllAdvancedOptionsArr[13].GetComponent<Text>().text = goldFood_GrowthAmount.ToString();
                break;

            default:
                break;
        }
    }




    ////////////////////////////////////////////// main menu screen buttons
    public void StartBtn()
    {
        StartGame();
    }

    public void GameModeLeftBtn()
    {
        if (gameMode == 'e')
        {
            gameMode = 'f';
            gameMode_Text.text = "First To:";

        }
        else
        {
            gameMode = 'e';
            gameMode_Text.text = "Endless";
        }
        UpdateMenuScreen();
    }
    public void GameModeRightBtn()
    {
        //simple because theres only one option to toggle through
        GameModeLeftBtn();
    }

    public void PointsLeftBtn()
    {
        if (goalPoints >= 100)
        {
            goalPoints -= 50;
        }
        target_Text.text = goalPoints.ToString();
        UpdateMenuScreen();
    }

    public void PointsRightBtn()
    {
        goalPoints += 50;
        target_Text.text = goalPoints.ToString();
        UpdateMenuScreen();
    }

    public void Num_PlayersLeftBtn()
    {
        if (num_Players >= 2)
        {
            num_Players -= 1;
        }
        UpdateMenuScreen();
    }
    public void Num_PlayersRightBtn()
    {
        if (num_Players <= 3)
        {
            num_Players += 1;
        }
        UpdateMenuScreen();
    }
    public void HumanPlayersLeftBtn()
    {
        if (num_Human_Players >= 2)
        {
            num_Human_Players -= 1;
        }
        UpdateMenuScreen();
    }
    public void HumanPlayersRightBtn()
    {
        if (num_Human_Players <= 3)
        {
            num_Human_Players += 1;
        }
        UpdateMenuScreen();
    }

    public void AdvancedOptionsOpenBtn()
    {
        //open advanced options menu
        advancedOptionsScreen.SetActive(true);
    }




    //////////////////////////////////////////////// advanced options screen buttons
    public void AdvancedOptionsCloseBtn()
    {
        //open advanced options menu
        advancedOptionsScreen.SetActive(false);
    }

    public void PresetsLeftBtn()
    {
        selectedPreset -= 1;
        if (selectedPreset < 0)
        {
            selectedPreset = presetsNamesArr.Length - 1;
        }
        UpdateAdvancedOptionsScreen(0, 0);
    }
    public void PresetsRightBtn()
    {
        selectedPreset += 1;
        if (selectedPreset > presetsNamesArr.Length - 1)
        {
            selectedPreset = 0;
        }
        UpdateAdvancedOptionsScreen(0, 0);
    }

    public void Player1ColourValueChanged(Dropdown change)
    {
        UpdateAdvancedOptionsScreen(1, change.value);
    }
    public void Player2ColourValueChanged(Dropdown change)
    {
        UpdateAdvancedOptionsScreen(2, change.value);
    }
    public void Player3ColourValueChanged(Dropdown change)
    {
        UpdateAdvancedOptionsScreen(3, change.value);
    }
    public void Player4ColourValueChanged(Dropdown change)
    {
        UpdateAdvancedOptionsScreen(4, change.value);
    }
    public void SnakeSpeedValueChanged(Dropdown change)
    {
        UpdateAdvancedOptionsScreen(5, (float)change);
    }
    public void StartingSizeValueChanged(Dropdown change)
    {
        UpdateAdvancedOptionsScreen(6, change.value);
    }
    public void GhostedDurationValueChanged(Dropdown change)
    {
        UpdateAdvancedOptionsScreen(7, change.value);
    }
    public void DeathPenaltyValueChanged(Dropdown change)
    {
        UpdateAdvancedOptionsScreen(8, change.value);
    }
    public void DoSnakesTurnIntoFoodValueChanged(Toggle toggle)
    {
        float f = 0;
        if (toggle.isOn) { f = 1; }
        UpdateAdvancedOptionsScreen(9, f);
    }
    public void GoldFoodSpawnChanceValueChanged(Dropdown change)
    {
        UpdateAdvancedOptionsScreen(10, change.value);
    }
    public void NormalFoodGrowthAmountValueChanged(Dropdown change)
    {
        UpdateAdvancedOptionsScreen(11, change.value);
    }
    public void DeadSnakeFoodGrowthAmountValueChanged(Dropdown change)
    {
        UpdateAdvancedOptionsScreen(12, change.value);
    }
    public void GoldFoodGrowthAmountValueChanged(Dropdown change)
    {
        UpdateAdvancedOptionsScreen(13, change.value);
    }

}






































using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Snake_Script : MonoBehaviour
{

        /*
        snake script

        ***Desc.
        this script controls one snake in the game.
        it is used for multiple snakes if playing multiplayer, 
        the values that control it and colour it are set automatically by the Game_Handler object

        when game starts snake is reset to starting values inc. position and size.
        when a button is pressed, the snake starts moving untill it dies
        the snake can move in one of 4 directions, one block at a time
        it moves through a method, called every x seconds by the gamehandler script
        if the snake hits food, it eats it and grows larger,
        if the snake hits another snake or a wall, it dies and is reset, with the option of turning into food


        ***TODO

        make number of lives

    */



    //set by game handler - defines which snake this is
    int PlayerNum;
    //set by game handler - defines how fast the snake moves - usefull for determining timing windows
    float SnakeSpeed;

    // the direction the snake is currently facing/moving Up,Down,Left,Right = u,d,l,r
    char snake_direction = 'u';

    //colours of the worm - base is set by handler, the others are generated from the base
    Color Col_Base;//snake head and alternating segments are this colour
    Color Col_Alt;//snake alternating segments are this colour
    Color Col_Outline;//outline of snake head and segments are this colour

    // colours used for flashing gold
    //snake transitions from this colour to the next and back
    Color Col_Flashing1 = new Color(1, 1, 0);
    Color Col_Flashing2 = new Color(0.9f, 0.9f, 0);
    //outline of snake head and segments are this colour
    Color Col_FlashingOutline = new Color(0.8f, 0.8f, 0);

    //used to determine if the snake can die - changed for temporary amounts of time
    bool canDie = true;

    //used for changing the colour of the snake for a temporary amount of time
    bool isFlashing = false;
    float FlashDuration = 0.3f;
    float flashTime = 0;

    //used for ghosting the snake for a temporary amount of time
    bool isGhosting = false;
    float ghosted_On_Spawn_Time;
    float ghostDuration = 0.4f;
    float ghostTime = 0;
    float ghostAmount1 = 0.1f;
    float ghostAmount2 = 0.3f;
    Color Col_Ghost1;
    Color Col_Ghost2;
    Color Col_GhostOutline;


    //bool tracks current score
    private int score = 0;
    //bool tracks highest score achieved
    private int highscore = 0;

    //player display displays score, highscore, as well as prompts and shows you length of temporary snake modes
    PlayerDisplay_Script PlayerDisplayScript;

    //controls for snake [Up, Down, Left, Right]
    KeyCode[] controlsArr;

    //a bool determining if the game is currently being played
    bool isAlive = false;
    //bool determining if the snake is currently waiting for an input to change,
    //  used to allow the snake to buffer inputs
    bool snakeIsWait = true;




    //keeps track of all segments of the snake
    List<GameObject> segmentsList = new List<GameObject>();

    //a prefab of a segment of snake
    GameObject SegmentPrefab;
    //the first segment of snake, already existing
    GameObject SnakeHead;

    Coroutine GhosterCor;
    Coroutine FlasherCor;





    //game controlling script
    GameHandler_Script Handler_Script;

    // setter for snakes values]
    public void SetObjects(GameHandler_Script handlerScript,  GameObject head, GameObject seg){
        Handler_Script = handlerScript;
        SnakeHead = head;
        SegmentPrefab = seg;
    }
    public void SetValues(int playernum, float snakeSpeed, int startingSize, Vector3 startingPos, int normalFood_Grow_Amount, int deadSnake_Grow_Amount, int goldFood_Grow_Amount, bool doesTurnIntoFood, float ghosted_On_Spawn_Time){
        PlayerNum = playernum;
        SnakeSpeed = snakeSpeed;
        Starting_Size = startingSize;
        Starting_Pos = startingPos;
        NormalFood_Grow_Amount = normalFood_Grow_Amount;
        DeadSnake_Grow_Amount = deadSnake_Grow_Amount;
        GoldFood_Grow_Amount = goldFood_Grow_Amount;
        DoesTurnIntoFood = doesTurnIntoFood;
        Ghosted_On_Spawn_Time = ghosted_On_Spawn_Time;
    }
    public void SetInputs(KeyCode[] inputs){
        controlsArr = inputs;
    }
    public void SetPlayerDisplay(PlayerDisplay_Script playerDisplayScript){
        PlayerDisplayScript = playerDisplayScript;
    }
    public void SetColour(Color col){
        Col_Base = new Color(col.r - 0.2f, col.g - 0.2f, col.b - 0.2f);
        Col_Outline = new Color(col.r - 0.55f, col.g - 0.55f, col.b - 0.55f);
        Col_Alt = new Color(col.r - 0.3f, col.g - 0.3f, col.b - 0.3f);

        //setting the colours of the snakes
        SnakeHead.GetComponent<SpriteRenderer>().color = Col_Outline;
        SnakeHead.transform.GetChild(0).GetComponent<SpriteRenderer>().color = Col_Base;
    }
    public void TryMoveSnake(){
        if (isAlive){
            MoveSnakeHead();
        }
    }
    // Start is called before the first frame update
    void Start()
    {
    }

    //startgame is called to refresh and start the game fresh
    void StartGame(){

        //destroy all snake segments
        foreach (GameObject seg in segmentsList)
        {
            Destroy(seg);
        }
        segmentsList = new List<GameObject>();

        //reset the score
        score = 0;

        //reset the snake's values
        SnakeHead.transform.position = Starting_Pos;

        snake_direction = 'u';

        Grow(Starting_Size);

        isAlive = true;
        snakeIsWait = true;

        GhosterCor = StartCoroutine(GhostFor(Ghosted_On_Spawn_Time));

        PlayerDisplayScript.HidePrompt();

        
        
    }

    // Update is called once per frame
    void Update() 
    {
        if(isFlashing){
            FlashColor();
        }

        if(isGhosting){
            FlashGhost();
        }
        
        
        if (isAlive == false){//if snake isnt moving, pressing any button will reset it
            if (Input.GetKeyDown(controlsArr[0]) || Input.GetKeyDown(controlsArr[1]) || Input.GetKeyDown(controlsArr[2]) || Input.GetKeyDown(controlsArr[3]))
            { 
            //start game
            StartGame();
            }
        }

        if (snakeIsWait == false){
            if (Input.GetKeyDown(controlsArr[0])){
                //prevents attempts to change direction to current axis
                if( snake_direction != 'u' && snake_direction != 'd'){
                    snake_direction = 'u';
                    snakeIsWait = true;
                }
            }
            if (Input.GetKeyDown(controlsArr[1])){
                //prevents attempts to change direction to current axis
                if( snake_direction != 'u' && snake_direction != 'd'){
                    snake_direction = 'd';
                    snakeIsWait = true;
                }
            }
            if (Input.GetKeyDown(controlsArr[2])){
                    //prevents attempts to change direction to current axis
                    if( snake_direction != 'l' && snake_direction != 'r'){
                    snake_direction = 'l';
                    snakeIsWait = true;
                }
            }
            if (Input.GetKeyDown(controlsArr[3])){
                    //prevents attempts to change direction to current axis
                    if( snake_direction != 'l' && snake_direction != 'r'){
                    snake_direction = 'r';
                    snakeIsWait = true;
                }
            }          
        }


    }

    void MoveSnakeHead(){//moves the head of the snake which the body follows

        if (!isAlive){
            return;
        }
        snakeIsWait = false; //object is no longer waiting to move

        Vector3 offset = new Vector3(); //the direction and amount the snake will move

        Vector3 newHeadRotation = new Vector3(); //the rotation of the snake's head

        switch (snake_direction)
        {
            case 'u':
            offset = new Vector2(0,1);
            newHeadRotation = new Vector3(0,0,0);
            break;

            case 'd':
            offset = new Vector2(0,-1);
            newHeadRotation = new Vector3(0,0,180);
            break;

            case 'l':
            offset = new Vector2(-1,0);
            newHeadRotation = new Vector3(0,0,90);
            break;

            case 'r':
            offset = new Vector2(1,0);
            newHeadRotation = new Vector3(0,0,270);
            break;
            
            default:
            break;
        }

        //setting the new target position
        Vector3 targetPos = SnakeHead.transform.position + offset;

        //check if theres anything in the target position
        switch (Handler_Script.CheckPos(PlayerNum, targetPos, true))
        {
            case "normalFood"://if spot was food then eat the food
            EatFood(NormalFood_Grow_Amount);
            goto case "empty";//the act as if the target spot was empty

            case "snakeFood"://if spot was food then eat the food
            EatFood(DeadSnake_Grow_Amount);
            goto case "empty";//the act as if the target spot was empty

            case "goldFood"://if spot was food then eat the food
            //flash gold for the duration that the snake is growing from the extra food
            
            if(isFlashing) {
                StopCoroutine(FlasherCor);
            }

            FlasherCor = StartCoroutine(FlashFor(SnakeSpeed*GoldFood_Grow_Amount));
            EatFood(GoldFood_Grow_Amount);
            goto case "empty";//the act as if the target spot was empty



            case "empty":   //if the target spot is empty
            //snake is able to move, then move the snake's head to the target and rotate it accordingly
            SnakeHead.transform.position = targetPos;
            SnakeHead.transform.rotation = Quaternion.Euler(newHeadRotation);
            //move the snake's segments toward where the head used to be
            MoveSegments(targetPos - offset);
            break;

            case "wall"://if spot was a wall
            //die
            Die();
            break;

            case "self":
            goto case "snake";

            case "snake"://if spot was a snake
            if (canDie){
                Die();
            }else{
                goto case "empty";
            }
            break;
            
            default:
            break;
        }
    }

    void EatFood(int amount){

        //increase and update score 
        score += amount;
        UpdateScore();

        //grow snake

        Grow(amount);

    }

    void UpdateScore()
    {
        if (score > highscore){
            highscore = score;
        }
        PlayerDisplayScript.UpdateScore(score);
    }


    public void Grow(int amount){
        //called to add a segment(s) to the snake
        for (int i = 0; i < amount; i++)
        {
        GameObject newSeg = Instantiate(SegmentPrefab, SnakeHead.transform.position, new Quaternion(0,0,0,0), this.transform);
        newSeg.GetComponent<SpriteRenderer>().color = Col_Outline;
        if( segmentsList.Count%2 == 1){//odd num segment is base colour
            newSeg.transform.GetChild(0).GetComponent<SpriteRenderer>().color = Col_Base;
        }
        else{//even num seg is alt colour
            newSeg.transform.GetChild(0).GetComponent<SpriteRenderer>().color = Col_Alt;
        }
        segmentsList.Add(newSeg);
        }
    }

    public void Die(){
        //stop the game
        isAlive = false;

        //reset snake values
        StopAllCoroutines();
        isFlashing = false;
        isGhosting = false;
        canDie = true;
        ResetSnakeColours();

        if (DoesTurnIntoFood){
            
            Handler_Script.SpawnFood(SnakeHead.transform.position, FoodType.DeadSnakeFood);
            SnakeHead.transform.position = Starting_Pos;
            foreach (GameObject seg in segmentsList)
            {
                Handler_Script.SpawnFood(seg.transform.position, FoodType.DeadSnakeFood);
                Destroy(seg);
            }
            segmentsList.Clear();
            
        }
        PlayerDisplayScript.UpdateScore(0);
        PlayerDisplayScript.StopCountdown();

    }

    public bool CheckForSnakeAtPos(Vector3 pos){ 
        if (pos == SnakeHead.transform.position){
            return true;
        }
        foreach (GameObject seg in segmentsList)
        {
            if (pos == seg.transform.position){
                return true;
            }
        }
        return false;
    }

 

    void MoveSegments(Vector3 oldPos){
        Vector3 tempPos;
        //cycles through the snake segments from top to bottom and moves them to where the next segment was
        for (int i = 0; i < segmentsList.Count; i++)
        {
            if (oldPos == segmentsList[i].transform.position){
                //if the segment was overlapping the previous one, dont move anymore segments
                return;
            }
            tempPos = segmentsList[i].transform.position;
            segmentsList[i].transform.position = oldPos;
            oldPos = tempPos;
        }

    }

    void ResetSnakeColours(){
        //setting the snake back to normal colours

        //setting the head colours right
        SnakeHead.GetComponent<SpriteRenderer>().color = Col_Outline;
        SnakeHead.transform.GetChild(0).GetComponent<SpriteRenderer>().color = Col_Base;
        
        //going through each segment and recolouring it appropriately
        for (int i = 0; i < segmentsList.Count; i++)
        {
            if( i%2 == 1){
                //odd num segment is base colour
                segmentsList[i].transform.GetComponent<SpriteRenderer>().color = Col_Outline;
                segmentsList[i].transform.GetChild(0).GetComponent<SpriteRenderer>().color = Col_Base;
            }
            else{
                //even num seg is alt colour
                segmentsList[i].transform.GetComponent<SpriteRenderer>().color = Col_Outline;
                segmentsList[i].transform.GetChild(0).GetComponent<SpriteRenderer>().color = Col_Alt;
            }
        }
    }

    IEnumerator FlashFor(float time){
        //set display to show golden time's duration
        PlayerDisplayScript.StartCountdown(time);

        isFlashing = true;
        canDie = false;

        yield return new WaitForSeconds (time);
        isFlashing = false;
        canDie = true;

        //setting the snake back to normal colours
        ResetSnakeColours();
    }


    void FlashColor(){
        Color col = Color.Lerp(Col_Flashing1, Col_Flashing2, flashTime);
        SnakeHead.GetComponent<SpriteRenderer>().color = Col_FlashingOutline;
        SnakeHead.transform.GetChild(0).GetComponent<SpriteRenderer>().color = col;
        
        foreach (GameObject seg in segmentsList)
        {
            seg.transform.GetComponent<SpriteRenderer>().color = Col_FlashingOutline;
            seg.transform.GetChild(0).GetComponent<SpriteRenderer>().color = col;
        }

        if (flashTime < 1){ 
            flashTime += (Time.deltaTime/FlashDuration);
        }
        else{
            flashTime = 0;
            Color tempCol = Col_Flashing1;
            Col_Flashing1 = Col_Flashing2;
            Col_Flashing2 = tempCol;
        }
    }



    IEnumerator GhostFor(float time){

        //set display to show ghosted time's duration
        PlayerDisplayScript.StartCountdown(time);
        
        canDie = false;
        isGhosting = true;

        yield return new WaitForSeconds (time);

        canDie = true;
        isGhosting = false;
        
        //setting the snake back to normal colours
        ResetSnakeColours();
    }

    void FlashGhost(){

        float opacity = Mathf.Lerp(GhostAmount1, GhostAmount2, ghostTime);

        //float opacity = GhostAmount1;//= float.Lerp(Col_Ghost1, Col_Ghost2, ghostTime);

        Color col1 = SnakeHead.transform.GetComponent<SpriteRenderer>().color;
        Color col2 = SnakeHead.transform.GetChild(0).GetComponent<SpriteRenderer>().color;
        col1.a = opacity;
        col2.a = opacity;
        SnakeHead.GetComponent<SpriteRenderer>().color = col1;
        SnakeHead.transform.GetChild(0).GetComponent<SpriteRenderer>().color = col2;
        
        foreach (GameObject seg in segmentsList)
        {
            col1 = seg.transform.GetComponent<SpriteRenderer>().color;
            col2 = seg.transform.GetChild(0).GetComponent<SpriteRenderer>().color;
            col1.a = opacity;
            col2.a = opacity;
            seg.transform.GetComponent<SpriteRenderer>().color = col1;
            seg.transform.GetChild(0).GetComponent<SpriteRenderer>().color  = col2;
        }

        if (ghostTime < 1)
        {
            ghostTime += (Time.deltaTime/GhostDuration);
        }
        else
        {
            ghostTime = 0;
            Color tempCol = Col_Ghost1;
            Col_Ghost1 = Col_Ghost2;
            Col_Ghost2 = tempCol;
        }

    }

}
